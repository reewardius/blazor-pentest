@page "/ping"
@using System.Diagnostics

<h3>Пинг удаленного сервера</h3>

<p>Введите адрес для пинга:</p>
<input @bind="serverAddress" />
<button @onclick="async () => await PingServer()">Пинговать</button>

@if (pingResult != null)
{
    <p>Результат пинга: @pingResult</p>

    @if (pingResult == "Success")
    {
        <button @onclick="async () => await DownloadWithTool(serverAddress, "curl")">Скачать с помощью curl</button>
        <button @onclick="async () => await DownloadWithTool(serverAddress, "wget")">Скачать с помощью wget</button>
    }
}

@code {
    private string serverAddress = "example.com";
    private string pingResult;

    private async Task PingServer()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(serverAddress))
            {
                pingResult = "Введите корректный адрес для пинга.";
                return;
            }

            Uri uriResult;
            if (!Uri.TryCreate(serverAddress, UriKind.Absolute, out uriResult))
            {
                pingResult = "Введите корректный адрес URL.";
                return;
            }

            using (var ping = new System.Net.NetworkInformation.Ping())
            {
                var reply = await ping.SendPingAsync(uriResult.Host);
                pingResult = reply.Status.ToString();
            }

            StateHasChanged(); // Обновление интерфейса
        }
        catch (Exception ex)
        {
            pingResult = $"Ошибка: {ex.Message}";
        }
    }

    private async Task DownloadWithTool(string serverAddress, string tool)
    {
        try
        {
            var processInfo = new ProcessStartInfo
            {
                FileName = tool,
                Arguments = $"-O - {serverAddress}", // -O сохраняет файл, - обозначает вывод в консоль
                RedirectStandardOutput = true,
                UseShellExecute = false,
                CreateNoWindow = true
            };

            using (var process = Process.Start(processInfo))
            {
                if (process != null)
                {
                    var output = await process.StandardOutput.ReadToEndAsync();
                    await process.WaitForExitAsync(); // Дождаться завершения процесса
                    // Обработайте результат, например, выведите его в консоль или обновите состояние компонента
                    Console.WriteLine(output);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при выполнении команды {tool}: {ex.Message}");
        }
    }
}
